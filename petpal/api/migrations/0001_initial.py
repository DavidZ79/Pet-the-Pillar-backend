# Generated by Django 4.2.7 on 2023-11-14 09:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phoneNumber', models.CharField(blank=True, max_length=15, null=True)),
                ('location', models.CharField(max_length=255)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='user_pictures/')),
                ('password', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Pending', 'Pending'), ('Denied', 'Denied')], max_length=10)),
                ('reason', models.CharField(max_length=2000)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MorePhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.ImageField(upload_to='photo_folder/')),
            ],
        ),
        migrations.CreateModel(
            name='PetSeeker',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('preference', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.baseuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PetShelter',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('missionStatement', models.TextField()),
                ('totalRating', models.IntegerField(blank=True, default=0)),
                ('numberOfRating', models.IntegerField(blank=True, default=0)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.baseuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('status', models.CharField(choices=[('Adopted', 'Adopted'), ('Pending', 'Pending'), ('Available', 'Available'), ('Withdrawn', 'Withdrawn')], max_length=10)),
                ('description', models.TextField(max_length=2500)),
                ('behavior', models.CharField(max_length=2000)),
                ('medicalHistory', models.CharField(max_length=2000)),
                ('specialNeeds', models.CharField(max_length=2000)),
                ('age', models.IntegerField()),
                ('breed', models.CharField(max_length=25)),
                ('gender', models.CharField(max_length=25)),
                ('size', models.IntegerField(choices=[(0, 'Extra Small'), (1, 'Small'), (2, 'Medium'), (3, 'Large'), (4, 'Extra Large')])),
                ('species', models.CharField(max_length=50)),
                ('color', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(max_length=50)),
                ('fee', models.IntegerField()),
                ('photos', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.morephotos')),
                ('shelter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.petshelter')),
            ],
        ),
        migrations.AddField(
            model_name='morephotos',
            name='photos',
            field=models.ManyToManyField(blank=True, to='api.photo'),
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=2000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='application',
            name='pet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.pet'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=2000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('shelter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_shelter', to='api.petshelter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_object_id', models.PositiveBigIntegerField()),
                ('status', models.CharField(choices=[('Read', 'Read'), ('Unread', 'Unread')], max_length=10)),
                ('forward_object_id', models.PositiveBigIntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content', models.CharField(max_length=2000)),
                ('forward_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_forward', to='contenttypes.contenttype')),
                ('user_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_user', to='contenttypes.contenttype')),
            ],
            options={
                'indexes': [models.Index(fields=['forward_content_type', 'forward_object_id'], name='api_notific_forward_e0a71e_idx'), models.Index(fields=['user_content_type', 'user_object_id'], name='api_notific_user_co_a418db_idx')],
            },
        ),
        migrations.AddField(
            model_name='application',
            name='seeker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.petseeker'),
        ),
    ]
